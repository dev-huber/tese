#!/bin/bash
# Script de diagn√≥stico r√°pido para Ctrl+Shift+R

echo "üîç DIAGN√ìSTICO: Por que Ctrl+Shift+R n√£o funciona?"
echo "================================================="
echo

# 1. Verificar se a extens√£o existe
echo "1Ô∏è‚É£ Verificando extens√£o Cursor..."
CURSOR_EXT_DIR="$HOME/.cursor/extensions/codespace-tunnel"
if [ -d "$CURSOR_EXT_DIR" ]; then
    echo "‚úÖ Diret√≥rio da extens√£o existe: $CURSOR_EXT_DIR"
    
    if [ -f "$CURSOR_EXT_DIR/package.json" ]; then
        echo "‚úÖ package.json encontrado"
        echo "   Vers√£o: $(grep '"version"' "$CURSOR_EXT_DIR/package.json" 2>/dev/null || echo 'N/A')"
    else
        echo "‚ùå package.json N√ÉO encontrado"
    fi
    
    if [ -f "$CURSOR_EXT_DIR/extension.js" ]; then
        echo "‚úÖ extension.js encontrado"
        echo "   Tamanho: $(wc -c < "$CURSOR_EXT_DIR/extension.js" 2>/dev/null || echo 'N/A') bytes"
    else
        echo "‚ùå extension.js N√ÉO encontrado"
    fi
else
    echo "‚ùå Extens√£o N√ÉO instalada em: $CURSOR_EXT_DIR"
    echo "üí° Solu√ß√£o: Executar instalador novamente"
fi

echo

# 2. Verificar bridge
echo "2Ô∏è‚É£ Verificando bridge local..."
BRIDGE_DIR="$HOME/cursor-codespace-bridge"
if [ -d "$BRIDGE_DIR" ]; then
    echo "‚úÖ Bridge instalado em: $BRIDGE_DIR"
    
    # Verificar se est√° rodando
    if command -v netstat >/dev/null 2>&1; then
        if netstat -an 2>/dev/null | grep -q ":3001"; then
            echo "‚úÖ Bridge rodando na porta 3001"
        else
            echo "‚ùå Bridge N√ÉO est√° rodando na porta 3001"
            echo "üí° Solu√ß√£o: $BRIDGE_DIR/start_bridge.sh"
        fi
    elif command -v ss >/dev/null 2>&1; then
        if ss -tuln 2>/dev/null | grep -q ":3001"; then
            echo "‚úÖ Bridge rodando na porta 3001"
        else
            echo "‚ùå Bridge N√ÉO est√° rodando na porta 3001"
            echo "üí° Solu√ß√£o: $BRIDGE_DIR/start_bridge.sh"
        fi
    else
        echo "‚ö†Ô∏è N√£o foi poss√≠vel verificar se bridge est√° rodando"
    fi
    
    # Testar conectividade
    if command -v curl >/dev/null 2>&1; then
        if curl -s -f http://localhost:3001/health >/dev/null 2>&1; then
            echo "‚úÖ Bridge responde em http://localhost:3001"
        else
            echo "‚ùå Bridge n√£o responde"
            echo "üí° Verifique se est√° rodando: ps aux | grep cursor_bridge"
        fi
    fi
else
    echo "‚ùå Bridge N√ÉO instalado"
    echo "üí° Solu√ß√£o: Executar instalador"
fi

echo

# 3. Verificar Codespace
echo "3Ô∏è‚É£ Verificando conectividade Codespace..."
CODESPACE_URL="https://super-trout-5gpv6wrgxgq53p6r9-8000.app.github.dev"
if command -v curl >/dev/null 2>&1; then
    if curl -s -I "$CODESPACE_URL" | grep -q "200\|302"; then
        echo "‚úÖ Codespace acess√≠vel: $CODESPACE_URL"
    else
        echo "‚ùå Codespace n√£o acess√≠vel"
        echo "üí° Verifique se o servidor est√° rodando no Codespace"
    fi
else
    echo "‚ö†Ô∏è curl n√£o dispon√≠vel para teste"
fi

echo

# 4. Verificar Cursor
echo "4Ô∏è‚É£ Verificando Cursor..."
if command -v cursor >/dev/null 2>&1; then
    echo "‚úÖ Cursor CLI dispon√≠vel"
else
    echo "‚ö†Ô∏è Cursor CLI n√£o encontrado no PATH"
fi

# Verificar se h√° processos Cursor rodando
if pgrep -f cursor >/dev/null 2>&1; then
    echo "‚úÖ Cursor est√° rodando"
    echo "   Processos: $(pgrep -c -f cursor)"
else
    echo "‚ùå Cursor n√£o est√° rodando"
    echo "üí° Inicie o Cursor primeiro"
fi

echo

# 5. Teste funcional
echo "5Ô∏è‚É£ Teste funcional..."
if [ -d "$BRIDGE_DIR" ] && [ -f "$BRIDGE_DIR/codespace" ]; then
    echo "üß™ Testando comando remoto..."
    TEST_RESULT=$("$BRIDGE_DIR/codespace" run "python3 -c \"print('‚úÖ Teste OK!')\"" 2>/dev/null)
    if echo "$TEST_RESULT" | grep -q "‚úÖ Teste OK!"; then
        echo "‚úÖ Comando remoto funciona!"
        echo "   Resultado: $TEST_RESULT"
    else
        echo "‚ùå Comando remoto falhou"
        echo "   Resultado: $TEST_RESULT"
    fi
else
    echo "‚ö†Ô∏è N√£o foi poss√≠vel testar comando remoto"
fi

echo

# Resumo e solu√ß√µes
echo "üìã RESUMO E SOLU√á√ïES"
echo "===================="

# Contar problemas
PROBLEMS=0

if [ ! -d "$CURSOR_EXT_DIR" ] || [ ! -f "$CURSOR_EXT_DIR/package.json" ]; then
    echo "‚ùå PROBLEMA: Extens√£o n√£o instalada corretamente"
    echo "   üí° SOLU√á√ÉO: curl -sSL https://raw.githubusercontent.com/dev-huber/tese/main/install_cursor_tunnel.sh | bash"
    PROBLEMS=$((PROBLEMS + 1))
fi

if ! netstat -an 2>/dev/null | grep -q ":3001" && ! ss -tuln 2>/dev/null | grep -q ":3001"; then
    echo "‚ùå PROBLEMA: Bridge n√£o est√° rodando"
    echo "   üí° SOLU√á√ÉO: $BRIDGE_DIR/start_bridge.sh"
    PROBLEMS=$((PROBLEMS + 1))
fi

if ! pgrep -f cursor >/dev/null 2>&1; then
    echo "‚ùå PROBLEMA: Cursor n√£o est√° rodando"
    echo "   üí° SOLU√á√ÉO: Abrir Cursor IDE"
    PROBLEMS=$((PROBLEMS + 1))
fi

echo

if [ $PROBLEMS -eq 0 ]; then
    echo "üéâ TUDO PARECE OK!"
    echo
    echo "üîß Se Ctrl+Shift+R ainda n√£o funciona, tente:"
    echo "1. No Cursor: Ctrl+Shift+P ‚Üí 'Developer: Reload Window'"
    echo "2. Ou use: Ctrl+Shift+P ‚Üí 'Codespace: Execute Remote Command'"
    echo "3. Ou teste na web: http://localhost:3001"
    echo
    echo "üìã Comandos alternativos:"
    echo "   $BRIDGE_DIR/codespace run \"python3 -c 'print(\\\"Hello!\\\")'\""
    echo "   curl -X POST http://localhost:3001/execute -H 'Content-Type: application/json' -d '{\"command\": \"python3 -c \\\"print(\\\\\\\"Hello!\\\\\\\")\\\"\"}}'"
else
    echo "‚ö†Ô∏è $PROBLEMS problema(s) encontrado(s)"
    echo "   Corrija os problemas acima e teste novamente"
fi

echo
echo "üìö Documenta√ß√£o completa: TROUBLESHOOTING.md"
