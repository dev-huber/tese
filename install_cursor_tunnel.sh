#!/bin/bash

# Script para instalar e configurar o t√∫nel Cursor -> Codespace na m√°quina local
# Execute: curl -sSL https://raw.githubusercontent.com/dev-huber/tese/main/install_cursor_tunnel.sh | bash

echo "üéØ Instalador do T√∫nel Cursor -> Codespace"
echo "=========================================="
echo ""

# Verificar pr√©-requisitos
check_prerequisites() {
    echo "üîç Verificando pr√©-requisitos..."
    
    # Verificar Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        echo "   ‚úÖ Node.js: $NODE_VERSION"
    else
        echo "   ‚ùå Node.js n√£o encontrado"
        echo "   üí° Instale Node.js: https://nodejs.org"
        echo "   üí° Ou use o gerenciador de pacotes:"
        echo "      - macOS: brew install node"
        echo "      - Ubuntu/Debian: sudo apt install nodejs npm"
        echo "      - CentOS/RHEL: sudo yum install nodejs npm"
        return 1
    fi
    
    # Verificar curl
    if command -v curl &> /dev/null; then
        echo "   ‚úÖ curl: dispon√≠vel"
    else
        echo "   ‚ùå curl n√£o encontrado"
        echo "   üí° Instale curl primeiro"
        return 1
    fi
    
    # Verificar conectividade com Codespace
    echo "   üåê Testando conectividade com Codespace..."
    if curl -s -I "https://super-trout-5gpv6wrgxgq53p6r9-8000.app.github.dev" | grep -q "HTTP/[12]"; then
        echo "   ‚úÖ Codespace: acess√≠vel"
    else
        echo "   ‚ùå Codespace n√£o acess√≠vel"
        echo "   üí° Verifique se o servidor est√° rodando no Codespace"
        return 1
    fi
    
    return 0
}

# Instalar bridge local
install_bridge() {
    echo "üì¶ Instalando bridge local..."
    
    # Criar diret√≥rio
    INSTALL_DIR="$HOME/cursor-codespace-bridge"
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # Baixar arquivos
    echo "   üì• Baixando cursor_bridge.js..."
    curl -sSL -o cursor_bridge.js "https://raw.githubusercontent.com/dev-huber/tese/main/cursor_bridge.js"
    
    echo "   üì• Baixando scripts auxiliares..."
    curl -sSL -o use_tunnel.sh "https://raw.githubusercontent.com/dev-huber/tese/main/use_tunnel.sh"
    chmod +x use_tunnel.sh
    
    # Criar script de inicializa√ß√£o
    cat > start_bridge.sh << 'EOF'
#!/bin/bash

BRIDGE_DIR="$HOME/cursor-codespace-bridge"
PROJECT_DIR="${1:-$(pwd)}"

echo "üöÄ Iniciando Cursor-Codespace Bridge..."
echo "   Bridge: $BRIDGE_DIR"
echo "   Projeto: $PROJECT_DIR"
echo ""

cd "$BRIDGE_DIR"
node cursor_bridge.js "$PROJECT_DIR"
EOF

    chmod +x start_bridge.sh
    
    echo "   ‚úÖ Bridge instalado em: $INSTALL_DIR"
    return 0
}

# Instalar extens√£o Cursor
install_cursor_extension() {
    echo "üîå Instalando extens√£o Cursor..."
    
    # Detectar diret√≥rio do Cursor
    CURSOR_EXTENSIONS_DIR=""
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        CURSOR_EXTENSIONS_DIR="$HOME/.cursor/extensions"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        CURSOR_EXTENSIONS_DIR="$HOME/.cursor/extensions"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
        # Windows (Git Bash)
        CURSOR_EXTENSIONS_DIR="$APPDATA/.cursor/extensions"
    else
        echo "   ‚ö†Ô∏è Sistema operacional n√£o detectado, usando padr√£o Linux"
        CURSOR_EXTENSIONS_DIR="$HOME/.cursor/extensions"
    fi
    
    # Criar diret√≥rio da extens√£o
    EXT_DIR="$CURSOR_EXTENSIONS_DIR/codespace-tunnel"
    mkdir -p "$EXT_DIR"
    
    # Baixar arquivos da extens√£o
    echo "   üì• Baixando package.json..."
    curl -sSL -o "$EXT_DIR/package.json" "https://raw.githubusercontent.com/dev-huber/tese/main/cursor-extension/package.json"
    
    echo "   üì• Baixando extension.js..."
    curl -sSL -o "$EXT_DIR/extension.js" "https://raw.githubusercontent.com/dev-huber/tese/main/cursor-extension/extension.js"
    
    echo "   ‚úÖ Extens√£o instalada em: $EXT_DIR"
    echo "   üí° Reinicie o Cursor para ativar a extens√£o"
    return 0
}

# Criar scripts de automa√ß√£o
create_automation_scripts() {
    echo "ü§ñ Criando scripts de automa√ß√£o..."
    
    SCRIPT_DIR="$HOME/cursor-codespace-bridge"
    
    # Script para executar comandos remotos
    cat > "$SCRIPT_DIR/remote.sh" << 'EOF'
#!/bin/bash

CODESPACE_URL="https://super-trout-5gpv6wrgxgq53p6r9-8000.app.github.dev"

case "$1" in
    "run"|"exec")
        if [ -z "$2" ]; then
            echo "‚ùå Uso: $0 run 'comando'"
            echo "Exemplo: $0 run 'python3 script.py'"
            exit 1
        fi
        
        echo "üöÄ Executando no Codespace: $2"
        curl -X POST "$CODESPACE_URL/execute" \
            -H "Content-Type: application/json" \
            -d "{\"command\": \"$2\"}" | jq .
        ;;
        
    "sync")
        if [ -z "$2" ] || [ ! -f "$2" ]; then
            echo "‚ùå Uso: $0 sync <arquivo>"
            echo "Exemplo: $0 sync script.py"
            exit 1
        fi
        
        echo "üîÑ Sincronizando: $2"
        CONTENT=$(cat "$2" | jq -Rs .)
        curl -X POST "$CODESPACE_URL/sync" \
            -H "Content-Type: application/json" \
            -d "{\"path\": \"$2\", \"content\": $CONTENT}" | jq .
        ;;
        
    "status")
        echo "üìä Status do Codespace:"
        curl -s "$CODESPACE_URL" && echo "‚úÖ Servidor online" || echo "‚ùå Servidor offline"
        ;;
        
    *)
        echo "üéØ Cursor-Codespace Remote Control"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  $0 run 'comando'    # Executar comando no Codespace"
        echo "  $0 sync arquivo     # Sincronizar arquivo para Codespace"
        echo "  $0 status           # Verificar status do Codespace"
        echo ""
        echo "Exemplos:"
        echo "  $0 run 'python3 -c \"print(\\\"Hello!\\\")\"'"
        echo "  $0 run 'pip install requests'"
        echo "  $0 sync meu_script.py"
        ;;
esac
EOF

    chmod +x "$SCRIPT_DIR/remote.sh"
    
    # Criar alias para facilitar uso
    echo "üìù Configurando aliases..."
    
    SHELL_RC=""
    if [[ "$SHELL" == *"zsh"* ]]; then
        SHELL_RC="$HOME/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        SHELL_RC="$HOME/.bashrc"
    fi
    
    if [ -n "$SHELL_RC" ] && [ -f "$SHELL_RC" ]; then
        if ! grep -q "cursor-codespace-bridge" "$SHELL_RC"; then
            echo "" >> "$SHELL_RC"
            echo "# Cursor-Codespace Bridge aliases" >> "$SHELL_RC"
            echo "alias codespace='$SCRIPT_DIR/remote.sh'" >> "$SHELL_RC"
            echo "alias csr='$SCRIPT_DIR/remote.sh run'" >> "$SHELL_RC"
            echo "alias css='$SCRIPT_DIR/remote.sh sync'" >> "$SHELL_RC"
            echo "   ‚úÖ Aliases adicionados a $SHELL_RC"
            echo "   üí° Execute: source $SHELL_RC (ou abra novo terminal)"
        else
            echo "   ‚ÑπÔ∏è Aliases j√° existem em $SHELL_RC"
        fi
    fi
    
    return 0
}

# Mostrar instru√ß√µes finais
show_final_instructions() {
    echo ""
    echo "üéâ Instala√ß√£o conclu√≠da com sucesso!"
    echo "=================================="
    echo ""
    echo "üìã O que foi instalado:"
    echo "   ‚úÖ Bridge local em: $HOME/cursor-codespace-bridge"
    echo "   ‚úÖ Extens√£o Cursor"
    echo "   ‚úÖ Scripts de automa√ß√£o"
    echo "   ‚úÖ Aliases de linha de comando"
    echo ""
    echo "üöÄ Como usar:"
    echo ""
    echo "1. üåâ Bridge Local (Recomendado):"
    echo "   cd seu-projeto"
    echo "   ~/cursor-codespace-bridge/start_bridge.sh"
    echo ""
    echo "2. üéÆ Linha de comando (ap√≥s reiniciar terminal):"
    echo "   codespace run 'python3 script.py'"
    echo "   codespace sync arquivo.py"
    echo "   codespace status"
    echo ""
    echo "3. üîå Extens√£o Cursor:"
    echo "   - Reinicie o Cursor"
    echo "   - Ctrl+Shift+R: Executar comando"
    echo "   - Ctrl+Shift+S: Sincronizar arquivo"
    echo ""
    echo "üîß Configura√ß√£o da extens√£o:"
    echo "   - Abra Cursor > Settings"
    echo "   - Procure 'Codespace Tunnel'"
    echo "   - URL: https://super-trout-5gpv6wrgxgq53p6r9-8000.app.github.dev"
    echo ""
    echo "üìö Documenta√ß√£o completa em:"
    echo "   ~/cursor-codespace-bridge/use_tunnel.sh help"
    echo ""
    echo "‚ú® Teste r√°pido:"
    echo "   ~/cursor-codespace-bridge/remote.sh run 'python3 -c \"print(\\\"Hello from Codespace!\\\")\"'"
}

# Fun√ß√£o principal
main() {
    if ! check_prerequisites; then
        echo ""
        echo "‚ùå Pr√©-requisitos n√£o atendidos. Instale as depend√™ncias e tente novamente."
        exit 1
    fi
    
    echo ""
    
    if ! install_bridge; then
        echo "‚ùå Falha ao instalar bridge"
        exit 1
    fi
    
    echo ""
    
    if ! install_cursor_extension; then
        echo "‚ùå Falha ao instalar extens√£o Cursor"
        exit 1
    fi
    
    echo ""
    
    if ! create_automation_scripts; then
        echo "‚ùå Falha ao criar scripts de automa√ß√£o"
        exit 1
    fi
    
    show_final_instructions
}

# Executar
main "$@"
